/**
 * Provider Model
 * Represents an AI model provider (e.g., OpenAI, Anthropic) and their configuration.
 * Manages authentication, connection details, and performance characteristics.
 * @model Provider
 * @description Core configuration for AI service providers
 * Fields:
 * @field id {String} - Unique UUID identifier for the provider
 * @field name {String} - Unique provider name (e.g., "OpenAI", "Anthropic")
 * @field baseUrl {String} - Base URL for API endpoints
 * @field apiKey {String} - Authentication key (encrypted)
 * @field inferenceSpeed {Float} - Average tokens per second output rate
 * @field createdAt {DateTime} - Creation timestamp
 * @field updatedAt {DateTime} - Last update timestamp
 * Relations:
 * @relation models {LanguageModel[]} - Models offered by this provider
 * Indexes:
 * @@unique([name]) - Ensures provider names are unique
 */
model Provider {
  id   String @id @default(uuid())
  name String @unique

  baseUrl        String
  apiKey         String
  inferenceSpeed Float  @default(20.0) // Tokens per second

  models LanguageModel[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("providers")
}

/**
 * LanguageModel Model
 * Represents an AI language model with its capabilities, costs, and operational status.
 * Supports model equivalency mapping across different providers through sibling relationships.
 * @model LanguageModel
 * @description Detailed configuration and status tracking for language models
 * Fields:
 * @field id {String} - Unique UUID identifier
 * @field externalId {String} - Provider's model identifier (e.g., "gpt-4", "claude-3")
 * @field name {String?} - Display name for the model
 * @field owner {String?} - Organization that owns/maintains the model
 * @field parameters {BigInt?} - Model size in parameters (e.g., 70B = 70000000000)
 * @field inputCost {Float} - USD cost per 1M input tokens
 * @field outputCost {Float} - USD cost per 1M output tokens
 * @field consecutiveErrorCount {Int} - Number of consecutive failures
 * @field status {ModelStatus} - Current operational status
 * @field lastFetched {DateTime} - Last model info update time
 * @field createdAt {DateTime} - Model creation timestamp
 * Relations:
 * @relation provider {Provider} - The provider offering this model
 * @relation siblings {LanguageModel[]} - Equivalent models from other providers
 * @relation siblingOf {LanguageModel[]} - Models this model is equivalent to
 * @relation requestLogs {RequestLog[]} - Usage history
 * Indexes:
 * @@unique([providerId, externalId]) - Ensures model uniqueness per provider
 */
model LanguageModel {
  id         String @id @default(uuid())
  externalId String

  name       String?
  owner      String?
  parameters BigInt?

  inputCost  Float
  outputCost Float

  requestLogs RequestLog[]

  consecutiveErrorCount Int         @default(0)
  status                ModelStatus @default(OPERATIONAL)

  lastFetched DateTime @updatedAt
  createdAt   DateTime @default(now()) @map("created")

  siblings  LanguageModel[] @relation("ModelSiblings")
  siblingOf LanguageModel[] @relation("ModelSiblings")

  providerId String
  provider   Provider @relation(fields: [providerId], references: [id])

  @@unique([providerId, externalId])
  @@map("language_models")
}

/**
 * RateLimitTier Model
 * Defines rate limiting rules and quotas for each API key tier.
 * Centralizes rate limit configuration for consistent policy enforcement.
 * @model RateLimitTier
 * @description Rate limiting and quota configuration for API key tiers
 * Fields:
 * @field tier {ApiKeyTier} - Tier identifier (FREE, PRO, ENTERPRISE)
 * @field requestsPerHour {Int} - Hourly request quota
 * @field requestsPerDay {Int} - Daily request quota
 * @field requestsPerMonth {Int} - Monthly request quota
 * @field maxBurstSize {Int} - Maximum concurrent requests allowed
 * @field tokensPerMonth {Int?} - Monthly token usage quota (null = unlimited)
 * @field createdAt {DateTime} - Creation timestamp
 * @field updatedAt {DateTime} - Last update timestamp
 * Relations:
 * @relation apiKeys {APIKey[]} - Keys using this tier's configuration
 */
model RateLimitTier {
  tier ApiKeyTier @id

  requestsPerHour  Int
  requestsPerDay   Int
  requestsPerMonth Int
  maxBurstSize     Int
  tokensPerMonth   Int?

  apiKeys APIKey[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("rate_limit_tiers")
}

/**
 * APIKey Model
 * Manages API authentication and tracks usage metrics.
 * Implements tiered rate limiting and usage monitoring.
 * @model APIKey
 * @description API key management and usage tracking
 * Fields:
 * @field id {String} - Unique UUID identifier
 * @field key {String} - Hashed API key value (format: udsk_{random32})
 * @field name {String?} - User-provided key name
 * @field tier {ApiKeyTier} - Access tier level
 * @field userId {String} - Owner's user ID
 * @field isRevoked {Boolean} - Revocation status
 * @field isDeleted {Boolean} - Deletion status
 * @field hourlyUsage {Int} - Requests made in current hour
 * @field dailyUsage {Int} - Requests made in current day
 * @field monthlyUsage {Int} - Requests made in current month
 * @field tokenUsage {Int} - Tokens used in current month
 * @field deletedAt {DateTime?} - When the key was deleted
 * @field lastUsedAt {DateTime?} - Last usage timestamp
 * @field createdAt {DateTime} - Creation timestamp
 * @field updatedAt {DateTime} - Last update timestamp
 * Relations:
 * @relation rateLimitTier {RateLimitTier} - Rate limit configuration
 * @relation requestLogs {RequestLog[]} - Usage history
 * Indexes:
 * @@index([tier]) - Optimizes queries by tier
 */
model APIKey {
  id  String @id @default(uuid())
  key String @unique

  name String?
  tier ApiKeyTier @default(FREE)

  isRevoked Boolean @default(false)
  isDeleted Boolean @default(false)

  hourlyUsage  Int @default(0)
  dailyUsage   Int @default(0)
  monthlyUsage Int @default(0)
  tokenUsage   Int @default(0)

  requestLogs RequestLog[]

  deletedAt  DateTime?
  lastUsedAt DateTime?
  updatedAt  DateTime  @updatedAt
  createdAt  DateTime  @default(now())

  userId String

  rateLimitTier RateLimitTier @relation(fields: [tier], references: [tier])

  @@index([tier])
  @@map("api_keys")
}

/**
 * RequestLog Model
 * Records detailed information about API requests for monitoring and billing.
 * Tracks performance metrics and resource usage.
 * @model RequestLog
 * @description Comprehensive API request logging and metrics
 * Fields:
 * @field id {String} - Unique UUID identifier
 * @field endpoint {ApiEndpoint} - API endpoint called
 * @field statusCode {Int} - HTTP response status
 * @field duration {Int} - Request duration in milliseconds
 * @field inputTokens {Int?} - Number of input tokens processed
 * @field outputTokens {Int?} - Number of output tokens generated
 * @field timestamp {DateTime} - When the request occurred
 * @field apiKeyId {String} - ID of the API key used
 * @field modelId {String} - ID of the model used
 * Relations:
 * @relation apiKey {APIKey} - The API key used
 * @relation model {LanguageModel} - The model used
 */
model RequestLog {
  id       String      @id @default(uuid())
  endpoint ApiEndpoint

  statusCode Int
  duration   Int

  inputTokens  Int?
  outputTokens Int?

  timestamp DateTime @default(now())

  apiKeyId String
  apiKey   APIKey @relation(fields: [apiKeyId], references: [id])

  modelId String
  model   LanguageModel @relation(fields: [modelId], references: [id])

  @@index([apiKeyId])
  @@index([modelId])
}
